@page "/chart"
@using Plants.Shared
@inject HttpClient Http

<h1>Plant humidity on chart - last 24h.</h1>

@if (scores == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12 col-sm-12 p-5">
            <label>Smooth <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox></label>
            <RadzenChart>
                <RadzenLineSeries Smooth="@smooth" Data="@Date" CategoryProperty="Date" Title="Humidities" LineType="LineType.Dashed" ValueProperty="Revenue">
                    <RadzenMarkers MarkerType="MarkerType.Square" />
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" FormatString="{0:dd.MM HH:mm}" />
                <RadzenValueAxis Formatter="@(value => value.ToString())">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Humidity points" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
}

@code 
{
    bool smooth = false;

    DataItem[] Date;

    private IEnumerable<Score> scores;

    protected override async Task OnInitializedAsync()
    {
        scores = (await Http.GetFromJsonAsync<Score[]>("Score"))
                    .Where(q => Math.Abs(q.TimeStamp.Subtract(DateTime.Now).TotalHours) < 24);

        Date = new DataItem[scores.Count()];

        for (int i = 0; i < Date.Length; i++)
        {
            Date[i] = new DataItem
            {
                Date = scores.ElementAt(i).TimeStamp,
                Revenue = scores.ElementAt(i).Value
            };
        }
    }

    class DataItem
    {
        public DateTime Date { get; set; }
        public double Revenue { get; set; }
    }
}